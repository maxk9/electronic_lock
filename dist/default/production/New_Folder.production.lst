

HI-TECH Software PIC PRO Macro Assembler V9.71a build 6446 
                                                                                               Tue Mar 14 20:05:28 2023

HI-TECH Software Omniscient Code Generator (PRO mode) build 6446
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	eeprom_data,global,class=EEDATA,space=2,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	text468,local,class=CODE,delta=2
    15                           	psect	text469,local,class=CODE,delta=2
    16                           	psect	text470,local,class=CODE,delta=2
    17                           	psect	text471,local,class=CODE,delta=2
    18                           	psect	text472,local,class=CODE,delta=2
    19                           	psect	text473,local,class=CODE,delta=2
    20                           	psect	text474,local,class=CODE,delta=2
    21                           	psect	text475,local,class=CODE,delta=2
    22                           	psect	text476,local,class=CODE,delta=2
    23                           	psect	text477,local,class=CODE,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	pa_nodes,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  000A                     	;#
    28                           
    29                           	psect	config
    30  8007  C9A4               	dw	51620	;#
    31  8008  DFFF               	dw	57343	;#
    32                           
    33                           	psect	eeprom_data
    34  0000  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    35                           
    36                           	psect	bitnvCOMMON
    37  03D0                     __pbitnvCOMMON:	
    38  03D0                     _msg_handled:	
    39  03D0                     	ds	1
    40  0018                     _CARRY	set	24
    41  005F                     _GIE	set	95
    42  005B                     _IOCIE	set	91
    43  005E                     _PEIE	set	94
    44  0060                     _RA0	set	96
    45  0061                     _RA1	set	97
    46  0064                     _RA4	set	100
    47  0065                     _RA5	set	101
    48  005D                     _TMR0IE	set	93
    49  005A                     _TMR0IF	set	90
    50  0095                     _OPTION_REGbits	set	149
    51  0099                     _OSCCON	set	153
    52  008C                     _TRISA	set	140
    53  04AB                     _PSA	set	1195
    54  04B8                     _SWDTEN	set	1208
    55  04AD                     _TMR0CS	set	1197
    56  0460                     _TRISA0	set	1120
    57  0461                     _TRISA1	set	1121
    58  0465                     _TRISA5	set	1125
    59  04AF                     _nWPUEN	set	1199
    60  018C                     _ANSELA	set	396
    61  0191                     _EEADRL	set	401
    62  0195                     _EECON1	set	405
    63  0196                     _EECON2	set	406
    64  0193                     _EEDATA	set	403
    65  0CA8                     _RD	set	3240
    66  0CA9                     _WR	set	3241
    67  0CAA                     _WREN	set	3242
    68  020C                     _WPUA	set	524
    69  0393                     _IOCAF	set	915
    70  1C9A                     _IOCAF2	set	7322
    71  1C9B                     _IOCAF3	set	7323
    72  1C92                     _IOCAN2	set	7314
    73  1C93                     _IOCAN3	set	7315
    74                           
    75                           	psect	cinit
    76  025F                     start_initialization:	
    77                           
    78                           ; Clear objects allocated to BITCOMMON
    79  025F  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    80                           
    81                           ; Clear objects allocated to COMMON
    82  0260  01FB               	clrf	__pbssCOMMON& (0+127)
    83                           
    84                           ; Clear objects allocated to BANK0
    85  0261  01A0               	clrf	__pbssBANK0& (0+127)
    86  0262  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    87  0263  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    88  0264  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    89  0265  01A4               	clrf	(__pbssBANK0+4)& (0+127)
    90  0266  01A5               	clrf	(__pbssBANK0+5)& (0+127)
    91  0267  01A6               	clrf	(__pbssBANK0+6)& (0+127)
    92  0268  01A7               	clrf	(__pbssBANK0+7)& (0+127)
    93  0269  01A8               	clrf	(__pbssBANK0+8)& (0+127)
    94  026A  01A9               	clrf	(__pbssBANK0+9)& (0+127)
    95  026B                     end_of_initialization:	
    96                           ;End of C runtime variable initialization code
    97                           
    98  026B  0020               	movlb	0
    99  026C  28BA               	ljmp	_main	;jump to C main() function
   100                           
   101                           	psect	bitbssCOMMON
   102  03C8                     __pbitbssCOMMON:	
   103  03C8                     _even_last:	
   104  03C8                     	ds	1
   105  03C9                     _msg_err:	
   106  03C9                     	ds	1
   107  03CA                     _odd_first:	
   108  03CA                     	ds	1
   109  03CB                     _pgm_mode:	
   110  03CB                     	ds	1
   111  03CC                     main@btn_released:	
   112  03CC                     	ds	1
   113                           
   114                           	psect	bssCOMMON
   115  007B                     __pbssCOMMON:	
   116  007B                     _bit_cnt:	
   117  007B                     	ds	1
   118                           
   119                           	psect	bssBANK0
   120  0020                     __pbssBANK0:	
   121  0020                     _read_data:	
   122  0020                     	ds	3
   123  0023                     _tmr0_btn_delay:	
   124  0023                     	ds	2
   125  0025                     _tmr0_msg_timeout:	
   126  0025                     	ds	2
   127  0027                     _tmr0_pgm_delay:	
   128  0027                     	ds	2
   129  0029                     _cnt_d:	
   130  0029                     	ds	1
   131                           
   132                           	psect	cstackCOMMON
   133  0070                     __pcstackCOMMON:	
   134  0070                     ?_isr:	
   135  0070                     ??_isr:	
   136                           ; 0 bytes @ 0x0
   137                           
   138  0070                     ?_init_timer:	
   139                           ; 0 bytes @ 0x0
   140                           
   141  0070                     ?_toggle_lock:	
   142                           ; 0 bytes @ 0x0
   143                           
   144  0070                     ?_flush_rx_msg:	
   145                           ; 0 bytes @ 0x0
   146                           
   147  0070                     ?_toggle_led:	
   148                           ; 0 bytes @ 0x0
   149                           
   150  0070                     ?_toggle_zumm:	
   151                           ; 0 bytes @ 0x0
   152                           
   153  0070                     ?_play_long_zum:	
   154                           ; 0 bytes @ 0x0
   155                           
   156  0070                     ?_main:	
   157                           ; 0 bytes @ 0x0
   158                           
   159  0070                     ?_eeprom_read:	
   160                           ; 0 bytes @ 0x0
   161                           
   162  0070                     ?_check_key_in_base:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  0070                     ?_save_key_eeprom:	
   166                           ; 1 bytes @ 0x0
   167                           
   168                           
   169                           ; 1 bytes @ 0x0
   170  0070                     	ds	2
   171  0072                     ??_eeprom_read:	
   172  0072                     ?_eeprom_write:	
   173                           ; 0 bytes @ 0x2
   174                           
   175  0072                     ??_init_timer:	
   176                           ; 0 bytes @ 0x2
   177                           
   178  0072                     ??_toggle_lock:	
   179                           ; 0 bytes @ 0x2
   180                           
   181  0072                     ??_flush_rx_msg:	
   182                           ; 0 bytes @ 0x2
   183                           
   184  0072                     ??_toggle_led:	
   185                           ; 0 bytes @ 0x2
   186                           
   187  0072                     ??_toggle_zumm:	
   188                           ; 0 bytes @ 0x2
   189                           
   190  0072                     ??_play_long_zum:	
   191                           ; 0 bytes @ 0x2
   192                           
   193  0072                     eeprom_write@value:	
   194                           ; 0 bytes @ 0x2
   195                           
   196                           
   197                           ; 1 bytes @ 0x2
   198  0072                     	ds	1
   199  0073                     ??_eeprom_write:	
   200  0073                     eeprom_write@addr:	
   201                           ; 0 bytes @ 0x3
   202                           
   203                           
   204                           ; 1 bytes @ 0x3
   205  0073                     	ds	1
   206  0074                     eeprom_read@addr:	
   207                           
   208                           ; 1 bytes @ 0x4
   209  0074                     	ds	1
   210  0075                     ??_check_key_in_base:	
   211  0075                     toggle_led@cnt_bit:	
   212                           ; 0 bytes @ 0x5
   213                           
   214  0075                     toggle_zumm@cnt_bit:	
   215                           ; 1 bytes @ 0x5
   216                           
   217  0075                     check_key_in_base@dat1:	
   218                           ; 1 bytes @ 0x5
   219                           
   220                           
   221                           ; 1 bytes @ 0x5
   222  0075                     	ds	1
   223  0076                     check_key_in_base@dat2:	
   224                           
   225                           ; 1 bytes @ 0x6
   226  0076                     	ds	1
   227  0077                     check_key_in_base@dat3:	
   228                           
   229                           ; 1 bytes @ 0x7
   230  0077                     	ds	1
   231  0078                     check_key_in_base@count_keys:	
   232                           
   233                           ; 1 bytes @ 0x8
   234  0078                     	ds	1
   235  0079                     ??_save_key_eeprom:	
   236                           
   237                           	psect	cstackBANK0
   238  002A                     __pcstackBANK0:	
   239                           ; 0 bytes @ 0x9
   240                           
   241  002A                     save_key_eeprom@num_key:	
   242                           
   243                           ; 1 bytes @ 0x0
   244  002A                     	ds	1
   245  002B                     ??_main:	
   246                           
   247                           ; 0 bytes @ 0x1
   248  002B                     	ds	3
   249  002E                     main@cnt_key:	
   250                           
   251                           ; 1 bytes @ 0x4
   252  002E                     	ds	1
   253                           
   254                           	psect	maintext
   255  00BA                     __pmaintext:	
   256 ;;Data sizes: Strings 0, constant 0, data 0, bss 11, persistent 0 stack 0
   257 ;;Auto spaces:   Size  Autos    Used
   258 ;; COMMON          14      9      12
   259 ;; BANK0           80      5      15
   260 ;; BANK1           32      0       0
   261 ;;
   262 ;; Pointer list with targets:
   263 ;;
   264 ;; Critical Paths under _main in COMMON
   265 ;;
   266 ;;   _main->_check_key_in_base
   267 ;;   _save_key_eeprom->_check_key_in_base
   268 ;;   _check_key_in_base->_eeprom_read
   269 ;;
   270 ;; Critical Paths under _isr in COMMON
   271 ;;
   272 ;;   None.
   273 ;;
   274 ;; Critical Paths under _main in BANK0
   275 ;;
   276 ;;   _main->_save_key_eeprom
   277 ;;
   278 ;; Critical Paths under _isr in BANK0
   279 ;;
   280 ;;   None.
   281 ;;
   282 ;; Critical Paths under _main in BANK1
   283 ;;
   284 ;;   None.
   285 ;;
   286 ;; Critical Paths under _isr in BANK1
   287 ;;
   288 ;;   None.
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   291 ;;
   292 ;;
   293 ;;Call Graph Tables:
   294 ;;
   295 ;; ---------------------------------------------------------------------------------
   296 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   297 ;; ---------------------------------------------------------------------------------
   298 ;; (0) _main                                                 4     4      0     975
   299 ;;                                              1 BANK0      4     4      0
   300 ;;                         _init_timer
   301 ;;                       _flush_rx_msg
   302 ;;                    _save_key_eeprom
   303 ;;                        _toggle_zumm
   304 ;;                      _play_long_zum
   305 ;;                  _check_key_in_base
   306 ;;                        _toggle_lock
   307 ;;                         _toggle_led
   308 ;;                       _eeprom_write
   309 ;; ---------------------------------------------------------------------------------
   310 ;; (1) _save_key_eeprom                                      1     1      0     514
   311 ;;                                              0 BANK0      1     1      0
   312 ;;                  _check_key_in_base
   313 ;;                       _eeprom_write
   314 ;; ---------------------------------------------------------------------------------
   315 ;; (1) _play_long_zum                                        3     3      0       0
   316 ;;                                              2 COMMON     3     3      0
   317 ;; ---------------------------------------------------------------------------------
   318 ;; (1) _check_key_in_base                                    4     4      0     294
   319 ;;                                              5 COMMON     4     4      0
   320 ;;                        _eeprom_read
   321 ;; ---------------------------------------------------------------------------------
   322 ;; (1) _toggle_zumm                                          4     4      0      34
   323 ;;                                              2 COMMON     4     4      0
   324 ;; ---------------------------------------------------------------------------------
   325 ;; (1) _toggle_led                                           4     4      0      34
   326 ;;                                              2 COMMON     4     4      0
   327 ;; ---------------------------------------------------------------------------------
   328 ;; (1) _eeprom_write                                         2     1      1      62
   329 ;;                                              2 COMMON     2     1      1
   330 ;; ---------------------------------------------------------------------------------
   331 ;; (2) _eeprom_read                                          3     3      0      31
   332 ;;                                              2 COMMON     3     3      0
   333 ;; ---------------------------------------------------------------------------------
   334 ;; (1) _flush_rx_msg                                         0     0      0       0
   335 ;; ---------------------------------------------------------------------------------
   336 ;; (1) _toggle_lock                                          0     0      0       0
   337 ;; ---------------------------------------------------------------------------------
   338 ;; (1) _init_timer                                           0     0      0       0
   339 ;; ---------------------------------------------------------------------------------
   340 ;; Estimated maximum stack depth 2
   341 ;; ---------------------------------------------------------------------------------
   342 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   343 ;; ---------------------------------------------------------------------------------
   344 ;; (4) _isr                                                  2     2      0       0
   345 ;;                                              0 COMMON     2     2      0
   346 ;; ---------------------------------------------------------------------------------
   347 ;; Estimated maximum stack depth 4
   348 ;; ---------------------------------------------------------------------------------
   349 ;; Call Graph Graphs:
   350 ;; _main (ROOT)
   351 ;;   _init_timer
   352 ;;   _flush_rx_msg
   353 ;;   _save_key_eeprom
   354 ;;     _check_key_in_base
   355 ;;       _eeprom_read
   356 ;;     _eeprom_write
   357 ;;   _toggle_zumm
   358 ;;   _play_long_zum
   359 ;;   _check_key_in_base
   360 ;;     _eeprom_read
   361 ;;   _toggle_lock
   362 ;;   _toggle_led
   363 ;;   _eeprom_write
   364 ;;
   365 ;; _isr (ROOT)
   366 ;;
   367 ;; Address spaces:
   368 ;;Name               Size   Autos  Total    Cost      Usage
   369 ;;BIGRAM              70      0       0       0        0.0%
   370 ;;EEDATA             100      0       0       0        0.0%
   371 ;;NULL                 0      0       0       0        0.0%
   372 ;;CODE                 0      0       0       0        0.0%
   373 ;;BITCOMMON            E      0       2       1       14.3%
   374 ;;BITSFR0              0      0       0       1        0.0%
   375 ;;SFR0                 0      0       0       1        0.0%
   376 ;;COMMON               E      9       C       2       85.7%
   377 ;;BITSFR1              0      0       0       2        0.0%
   378 ;;SFR1                 0      0       0       2        0.0%
   379 ;;BITSFR2              0      0       0       3        0.0%
   380 ;;SFR2                 0      0       0       3        0.0%
   381 ;;STACK                0      0       3       3        0.0%
   382 ;;BITSFR3              0      0       0       4        0.0%
   383 ;;SFR3                 0      0       0       4        0.0%
   384 ;;ABS                  0      0      1B       4        0.0%
   385 ;;BITBANK0            50      0       0       5        0.0%
   386 ;;BITSFR4              0      0       0       5        0.0%
   387 ;;SFR4                 0      0       0       5        0.0%
   388 ;;BANK0               50      5       F       6       18.8%
   389 ;;BITSFR5              0      0       0       6        0.0%
   390 ;;SFR5                 0      0       0       6        0.0%
   391 ;;BITBANK1            20      0       0       7        0.0%
   392 ;;BITSFR6              0      0       0       7        0.0%
   393 ;;SFR6                 0      0       0       7        0.0%
   394 ;;BANK1               20      0       0       8        0.0%
   395 ;;BITSFR7              0      0       0       8        0.0%
   396 ;;SFR7                 0      0       0       8        0.0%
   397 ;;BITSFR8              0      0       0       9        0.0%
   398 ;;SFR8                 0      0       0       9        0.0%
   399 ;;DATA                 0      0      1E       9        0.0%
   400 ;;BITSFR9              0      0       0      10        0.0%
   401 ;;SFR9                 0      0       0      10        0.0%
   402 ;;BITSFR10             0      0       0      11        0.0%
   403 ;;SFR10                0      0       0      11        0.0%
   404 ;;BITSFR11             0      0       0      12        0.0%
   405 ;;SFR11                0      0       0      12        0.0%
   406 ;;BITSFR12             0      0       0      13        0.0%
   407 ;;SFR12                0      0       0      13        0.0%
   408 ;;BITSFR13             0      0       0      14        0.0%
   409 ;;SFR13                0      0       0      14        0.0%
   410 ;;BITSFR14             0      0       0      15        0.0%
   411 ;;SFR14                0      0       0      15        0.0%
   412 ;;BITSFR15             0      0       0      16        0.0%
   413 ;;SFR15                0      0       0      16        0.0%
   414 ;;BITSFR16             0      0       0      17        0.0%
   415 ;;SFR16                0      0       0      17        0.0%
   416 ;;BITSFR17             0      0       0      18        0.0%
   417 ;;SFR17                0      0       0      18        0.0%
   418 ;;BITSFR18             0      0       0      19        0.0%
   419 ;;SFR18                0      0       0      19        0.0%
   420 ;;BITSFR19             0      0       0      20        0.0%
   421 ;;SFR19                0      0       0      20        0.0%
   422 ;;BITSFR20             0      0       0      21        0.0%
   423 ;;SFR20                0      0       0      21        0.0%
   424 ;;BITSFR21             0      0       0      22        0.0%
   425 ;;SFR21                0      0       0      22        0.0%
   426 ;;BITSFR22             0      0       0      23        0.0%
   427 ;;SFR22                0      0       0      23        0.0%
   428 ;;BITSFR23             0      0       0      24        0.0%
   429 ;;SFR23                0      0       0      24        0.0%
   430 ;;BITSFR24             0      0       0      25        0.0%
   431 ;;SFR24                0      0       0      25        0.0%
   432 ;;BITSFR25             0      0       0      26        0.0%
   433 ;;SFR25                0      0       0      26        0.0%
   434 ;;BITSFR26             0      0       0      27        0.0%
   435 ;;SFR26                0      0       0      27        0.0%
   436 ;;BITSFR27             0      0       0      28        0.0%
   437 ;;SFR27                0      0       0      28        0.0%
   438 ;;BITSFR28             0      0       0      29        0.0%
   439 ;;SFR28                0      0       0      29        0.0%
   440 ;;BITSFR29             0      0       0      30        0.0%
   441 ;;SFR29                0      0       0      30        0.0%
   442 ;;BITSFR30             0      0       0      31        0.0%
   443 ;;SFR30                0      0       0      31        0.0%
   444 ;;BITSFR31             0      0       0      32        0.0%
   445 ;;SFR31                0      0       0      32        0.0%
   446                           
   447                           
   448 ;; *************** function _main *****************
   449 ;; Defined at:
   450 ;;		line 269 in file "main.c"
   451 ;; Parameters:    Size  Location     Type
   452 ;;		None
   453 ;; Auto vars:     Size  Location     Type
   454 ;;  cnt_key         1    4[BANK0 ] unsigned char 
   455 ;; Return value:  Size  Location     Type
   456 ;;		None               void
   457 ;; Registers used:
   458 ;;		wreg, status,2, status,0, pclath, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : 17F/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMMON   BANK0   BANK1
   464 ;;      Params:         0       0       0
   465 ;;      Locals:         0       1       0
   466 ;;      Temps:          0       3       0
   467 ;;      Totals:         0       4       0
   468 ;;Total ram usage:        4 bytes
   469 ;; Hardware stack levels required when called:    4
   470 ;; This function calls:
   471 ;;		_init_timer
   472 ;;		_flush_rx_msg
   473 ;;		_save_key_eeprom
   474 ;;		_toggle_zumm
   475 ;;		_play_long_zum
   476 ;;		_check_key_in_base
   477 ;;		_toggle_lock
   478 ;;		_toggle_led
   479 ;;		_eeprom_write
   480 ;; This function is called by:
   481 ;;		Startup code after reset
   482 ;; This function uses a non-reentrant model
   483 ;;
   484  00BA                     _main:	
   485                           
   486                           ;main.c: 270: unsigned char cnt_key = 0;
   487                           
   488                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   489  00BA  01AE               	clrf	main@cnt_key
   490                           
   491                           ;main.c: 271: static unsigned char s_packet[8] = {0};
   492                           ;main.c: 272: static bit btn_released = 0;
   493                           ;main.c: 278: OSCCON = 0x78;
   494  00BB  3078               	movlw	120
   495  00BC  0021               	movlb	1	; select bank1
   496  00BD  0099               	movwf	25	;volatile
   497                           
   498                           ;main.c: 280: ANSELA = 0x0;
   499  00BE  0023               	movlb	3	; select bank3
   500  00BF  018C               	clrf	12	;volatile
   501                           
   502                           ;main.c: 281: TRISA = 0xff;
   503  00C0  30FF               	movlw	255
   504  00C1  0021               	movlb	1	; select bank1
   505  00C2  008C               	movwf	12	;volatile
   506                           
   507                           ;main.c: 282: TRISA5 = 0;
   508  00C3  128C               	bcf	12,5
   509                           
   510                           ;main.c: 283: TRISA0 = 0;
   511  00C4  100C               	bcf	12,0
   512                           
   513                           ;main.c: 284: TRISA1 = 0;
   514  00C5  108C               	bcf	12,1
   515                           
   516                           ;main.c: 285: RA0 = 1;
   517  00C6  0020               	movlb	0	; select bank0
   518  00C7  140C               	bsf	12,0
   519                           
   520                           ;main.c: 286: RA1 = 1;
   521  00C8  148C               	bsf	12,1
   522                           
   523                           ;main.c: 288: nWPUEN = 0;
   524  00C9  0021               	movlb	1	; select bank1
   525  00CA  1395               	bcf	21,7
   526                           
   527                           ;main.c: 289: WPUA = 0xFF;
   528  00CB  30FF               	movlw	255
   529  00CC  0024               	movlb	4	; select bank4
   530  00CD  008C               	movwf	12	;volatile
   531                           
   532                           ;main.c: 293: SWDTEN = 0;
   533  00CE  0021               	movlb	1	; select bank1
   534  00CF  1017               	bcf	23,0
   535  00D0  0064               	clrwdt	;#
   536                           
   537                           ;main.c: 296: IOCIE = 1;
   538  00D1  158B               	bsf	11,3
   539                           
   540                           ;main.c: 297: IOCAN3 = 1;
   541  00D2  0027               	movlb	7	; select bank7
   542  00D3  1592               	bsf	18,3
   543                           
   544                           ;main.c: 298: IOCAN2 = 1;
   545  00D4  1512               	bsf	18,2
   546                           
   547                           ;main.c: 300: init_timer();
   548  00D5  3182  227D  3180   	fcall	_init_timer
   549                           
   550                           ;main.c: 303: PEIE = 1;
   551  00D8  170B               	bsf	11,6
   552                           
   553                           ;main.c: 304: GIE = 1;
   554  00D9  178B               	bsf	11,7
   555                           
   556                           ;main.c: 305: WREN = 1;
   557  00DA  0023               	movlb	3	; select bank3
   558  00DB  1515               	bsf	21,2
   559                           
   560                           ;main.c: 307: flush_rx_msg();
   561  00DC  3182  226D  3180   	fcall	_flush_rx_msg
   562  00DF                     l2470:	
   563                           
   564                           ;main.c: 311: if (!msg_handled) {
   565  00DF  187A               	btfsc	_msg_handled/(0+8),_msg_handled& (0+7)
   566  00E0  2921               	goto	l1164
   567                           
   568                           ;main.c: 323: if (!msg_err) {
   569  00E1  18F9               	btfsc	_msg_err/(0+8),_msg_err& (0+7)
   570  00E2  28F5               	goto	l2484
   571                           
   572                           ;main.c: 324: if (pgm_mode) {
   573  00E3  1DF9               	btfss	_pgm_mode/(0+8),_pgm_mode& (0+7)
   574  00E4  28F9               	goto	l2486
   575                           
   576                           ;main.c: 325: tmr0_pgm_delay = 0;
   577  00E5  0020               	movlb	0	; select bank0
   578  00E6  01A7               	clrf	_tmr0_pgm_delay	;volatile
   579  00E7  01A8               	clrf	_tmr0_pgm_delay+1	;volatile
   580                           
   581                           ;main.c: 326: ++cnt_key;
   582  00E8  0AAE               	incf	main@cnt_key,f
   583                           
   584                           ;main.c: 327: if (save_key_eeprom(cnt_key)) {
   585  00E9  082E               	movf	main@cnt_key,w
   586  00EA  3181  216A  3180   	fcall	_save_key_eeprom
   587  00ED  3A00               	xorlw	0
   588  00EE  1903               	skipnz
   589  00EF  28F5               	goto	l2484
   590                           
   591                           ;main.c: 328: toggle_zumm(2);
   592  00F0  3002               	movlw	2
   593  00F1  3181  21CE  3180   	fcall	_toggle_zumm
   594                           
   595                           ;main.c: 329: } else {
   596  00F4  291E               	goto	l2504
   597  00F5                     l2484:	
   598                           
   599                           ;main.c: 330: play_long_zum();
   600  00F5  3182  2236  3180   	fcall	_play_long_zum
   601  00F8  291E               	goto	l2504
   602  00F9                     l2486:	
   603                           
   604                           ;main.c: 333: if (check_key_in_base()) {
   605  00F9  3181  219C  3180   	fcall	_check_key_in_base
   606  00FC  3A00               	xorlw	0
   607  00FD  1903               	skipnz
   608  00FE  291E               	goto	l2504
   609                           
   610                           ;main.c: 334: toggle_lock();
   611  00FF  3182  2276  3180   	fcall	_toggle_lock
   612                           
   613                           ;main.c: 335: if ((RA5 == 1)) {
   614  0102  1E8C               	btfss	12,5
   615  0103  291A               	goto	l2500
   616                           
   617                           ;main.c: 337: { TRISA0 = 0; RA0 = 0; };
   618  0104  0021               	movlb	1	; select bank1
   619  0105  100C               	bcf	12,0
   620  0106  0020               	movlb	0	; select bank0
   621  0107  100C               	bcf	12,0
   622                           
   623                           ;main.c: 338: _delay((unsigned long)((500)*(16000000/4000.0)));
   624  0108  300B               	movlw	11
   625  0109  00AD               	movwf	??_main+2
   626  010A  301C               	movlw	28
   627  010B  00AC               	movwf	??_main+1
   628  010C  3063               	movlw	99
   629  010D  00AB               	movwf	??_main
   630  010E                     u1517:	
   631  010E  0BAB               	decfsz	??_main,f
   632  010F  290E               	goto	u1517
   633  0110  0BAC               	decfsz	??_main+1,f
   634  0111  290E               	goto	u1517
   635  0112  0BAD               	decfsz	??_main+2,f
   636  0113  290E               	goto	u1517
   637  0114  0064               	clrwdt
   638                           
   639                           ;main.c: 339: { RA0 = 1; TRISA0 = 0; };
   640  0115  0020               	movlb	0	; select bank0
   641  0116  140C               	bsf	12,0
   642  0117  0021               	movlb	1	; select bank1
   643  0118  100C               	bcf	12,0
   644                           
   645                           ;main.c: 340: } else {
   646  0119  291E               	goto	l2504
   647  011A                     l2500:	
   648                           
   649                           ;main.c: 341: toggle_led(3);
   650  011A  3003               	movlw	3
   651  011B  3181  21F6  3180   	fcall	_toggle_led
   652  011E                     l2504:	
   653                           
   654                           ;main.c: 348: }
   655                           ;main.c: 350: flush_rx_msg();
   656  011E  3182  226D  3180   	fcall	_flush_rx_msg
   657  0121                     l1164:	
   658                           
   659                           ;main.c: 351: }
   660                           ;main.c: 354: if ((tmr0_msg_timeout > 6) && msg_handled) {
   661  0121  3000               	movlw	0
   662  0122  0020               	movlb	0	; select bank0
   663  0123  0226               	subwf	_tmr0_msg_timeout+1,w	;volatile
   664  0124  3007               	movlw	7
   665  0125  1903               	skipnz
   666  0126  0225               	subwf	_tmr0_msg_timeout,w	;volatile
   667  0127  1803               	btfsc	3,0
   668  0128  1C7A               	btfss	_msg_handled/(0+8),_msg_handled& (0+7)
   669  0129  292F               	goto	l2512
   670                           
   671                           ;main.c: 355: tmr0_msg_timeout = 0;
   672  012A  01A5               	clrf	_tmr0_msg_timeout	;volatile
   673  012B  01A6               	clrf	_tmr0_msg_timeout+1	;volatile
   674                           
   675                           ;main.c: 356: flush_rx_msg();
   676  012C  3182  226D  3180   	fcall	_flush_rx_msg
   677  012F                     l2512:	
   678                           
   679                           ;main.c: 357: }
   680                           ;main.c: 360: if ((RA4 == 0)) {
   681  012F  1A0C               	btfsc	12,4
   682  0130  2953               	goto	l1175
   683                           
   684                           ;main.c: 362: if (tmr0_btn_delay > 5) {
   685  0131  3000               	movlw	0
   686  0132  0224               	subwf	_tmr0_btn_delay+1,w	;volatile
   687  0133  3006               	movlw	6
   688  0134  1903               	skipnz
   689  0135  0223               	subwf	_tmr0_btn_delay,w	;volatile
   690  0136  1803               	btfsc	3,0
   691                           
   692                           ;main.c: 363: if (!btn_released) {
   693  0137  1A79               	btfsc	main@btn_released/(0+8),main@btn_released& (0+7)
   694  0138  293D               	goto	l2522
   695                           
   696                           ;main.c: 364: btn_released = 1;
   697  0139  1679               	bsf	main@btn_released/(0+8),main@btn_released& (0+7)
   698                           
   699                           ;main.c: 365: toggle_lock();
   700  013A  3182  2276  3180   	fcall	_toggle_lock
   701  013D                     l2522:	
   702                           
   703                           ;main.c: 366: }
   704                           ;main.c: 367: }
   705                           ;main.c: 370: if (tmr0_btn_delay > 312) {
   706  013D  3001               	movlw	1
   707  013E  0224               	subwf	_tmr0_btn_delay+1,w	;volatile
   708  013F  3039               	movlw	57
   709  0140  1903               	skipnz
   710  0141  0223               	subwf	_tmr0_btn_delay,w	;volatile
   711  0142  1C03               	skipc
   712  0143  2956               	goto	l2534
   713                           
   714                           ;main.c: 371: play_long_zum();
   715  0144  3182  2236  3180   	fcall	_play_long_zum
   716                           
   717                           ;main.c: 372: pgm_mode = 1;
   718  0147  15F9               	bsf	_pgm_mode/(0+8),_pgm_mode& (0+7)
   719                           
   720                           ;main.c: 373: tmr0_pgm_delay = 0;
   721  0148  0020               	movlb	0	; select bank0
   722  0149  01A7               	clrf	_tmr0_pgm_delay	;volatile
   723  014A  01A8               	clrf	_tmr0_pgm_delay+1	;volatile
   724                           
   725                           ;main.c: 374: tmr0_btn_delay = 0;
   726  014B  01A3               	clrf	_tmr0_btn_delay	;volatile
   727  014C  01A4               	clrf	_tmr0_btn_delay+1	;volatile
   728                           
   729                           ;main.c: 376: eeprom_write(0, 0);
   730  014D  01F2               	clrf	?_eeprom_write
   731  014E  3000               	movlw	0
   732  014F  3182  221E  3180   	fcall	_eeprom_write
   733  0152  2956               	goto	l2534
   734  0153                     l1175:	
   735                           
   736                           ;main.c: 380: btn_released = 0;
   737  0153  1279               	bcf	main@btn_released/(0+8),main@btn_released& (0+7)
   738                           
   739                           ;main.c: 381: tmr0_btn_delay = 0;
   740  0154  01A3               	clrf	_tmr0_btn_delay	;volatile
   741  0155  01A4               	clrf	_tmr0_btn_delay+1	;volatile
   742  0156                     l2534:	
   743                           
   744                           ;main.c: 382: }
   745                           ;main.c: 384: if (pgm_mode) {
   746  0156  1DF9               	btfss	_pgm_mode/(0+8),_pgm_mode& (0+7)
   747  0157  2968               	goto	l2544
   748                           
   749                           ;main.c: 385: toggle_led(1);
   750  0158  3001               	movlw	1
   751  0159  3181  21F6  3180   	fcall	_toggle_led
   752                           
   753                           ;main.c: 388: if (tmr0_pgm_delay > 600) {
   754  015C  3002               	movlw	2
   755  015D  0020               	movlb	0	; select bank0
   756  015E  0228               	subwf	_tmr0_pgm_delay+1,w	;volatile
   757  015F  3059               	movlw	89
   758  0160  1903               	skipnz
   759  0161  0227               	subwf	_tmr0_pgm_delay,w	;volatile
   760  0162  1C03               	skipc
   761  0163  2968               	goto	l2544
   762                           
   763                           ;main.c: 389: pgm_mode = 0;
   764  0164  11F9               	bcf	_pgm_mode/(0+8),_pgm_mode& (0+7)
   765                           
   766                           ;main.c: 390: play_long_zum();
   767  0165  3182  2236  3180   	fcall	_play_long_zum
   768  0168                     l2544:	
   769                           
   770                           ;main.c: 391: }
   771                           ;main.c: 392: }
   772                           ;main.c: 395: _nop();
   773  0168  0000               	nop
   774  0169  28DF               	goto	l2470
   775  016A                     __end_of_main:	
   776                           
   777                           	psect	text468
   778  016A                     __ptext468:	
   779 ;; =============== function _main ends ============
   780                           
   781                           
   782 ;; *************** function _save_key_eeprom *****************
   783 ;; Defined at:
   784 ;;		line 244 in file "main.c"
   785 ;; Parameters:    Size  Location     Type
   786 ;;  num_key         1    wreg     unsigned char 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  num_key         1    0[BANK0 ] unsigned char 
   789 ;; Return value:  Size  Location     Type
   790 ;;                  1    wreg      unsigned char 
   791 ;; Registers used:
   792 ;;		wreg, status,2, status,0, pclath, cstack
   793 ;; Tracked objects:
   794 ;;		On entry : 1F/0
   795 ;;		On exit  : 1C/0
   796 ;;		Unchanged: FFFE0/0
   797 ;; Data sizes:     COMMON   BANK0   BANK1
   798 ;;      Params:         0       0       0
   799 ;;      Locals:         0       1       0
   800 ;;      Temps:          0       0       0
   801 ;;      Totals:         0       1       0
   802 ;;Total ram usage:        1 bytes
   803 ;; Hardware stack levels used:    1
   804 ;; Hardware stack levels required when called:    3
   805 ;; This function calls:
   806 ;;		_check_key_in_base
   807 ;;		_eeprom_write
   808 ;; This function is called by:
   809 ;;		_main
   810 ;; This function uses a non-reentrant model
   811 ;;
   812  016A                     _save_key_eeprom:	
   813                           
   814                           ; Regs used in _save_key_eeprom: [wreg+status,2+status,0+pclath+cstack]
   815                           ;save_key_eeprom@num_key stored from wreg
   816  016A  00AA               	movwf	save_key_eeprom@num_key
   817                           
   818                           ;main.c: 246: if(check_key_in_base()) {
   819  016B  3181  219C  3181   	fcall	_check_key_in_base
   820  016E  3A00               	xorlw	0
   821  016F  1D03               	btfss	3,2
   822                           
   823                           ;main.c: 247: return 0;
   824  0170  3400               	retlw	0
   825                           
   826                           ;main.c: 248: }
   827                           ;main.c: 252: if(num_key > 10)
   828  0171  300B               	movlw	11
   829  0172  0020               	movlb	0	; select bank0
   830  0173  022A               	subwf	save_key_eeprom@num_key,w
   831  0174  1803               	btfsc	3,0
   832  0175  3400               	retlw	0
   833                           
   834                           ;main.c: 255: eeprom_write(0, num_key);
   835  0176  082A               	movf	save_key_eeprom@num_key,w
   836  0177  00F2               	movwf	?_eeprom_write
   837  0178  3000               	movlw	0
   838  0179  3182  221E  3181   	fcall	_eeprom_write
   839                           
   840                           ;main.c: 256: --num_key;
   841  017C  0020               	movlb	0	; select bank0
   842  017D  03AA               	decf	save_key_eeprom@num_key,f
   843                           
   844                           ;main.c: 257: eeprom_write(num_key * 3 + 1, read_data[2]);
   845  017E  0822               	movf	_read_data+2,w	;volatile
   846  017F  00F2               	movwf	?_eeprom_write
   847  0180  082A               	movf	save_key_eeprom@num_key,w
   848  0181  0709               	addwf	9,w
   849  0182  072A               	addwf	save_key_eeprom@num_key,w
   850  0183  3E01               	addlw	1
   851  0184  3182  221E  3181   	fcall	_eeprom_write
   852                           
   853                           ;main.c: 258: eeprom_write(num_key * 3 + 2, read_data[1]);
   854  0187  0020               	movlb	0	; select bank0
   855  0188  0821               	movf	_read_data+1,w	;volatile
   856  0189  00F2               	movwf	?_eeprom_write
   857  018A  082A               	movf	save_key_eeprom@num_key,w
   858  018B  0709               	addwf	9,w
   859  018C  072A               	addwf	save_key_eeprom@num_key,w
   860  018D  3E02               	addlw	2
   861  018E  3182  221E  3181   	fcall	_eeprom_write
   862                           
   863                           ;main.c: 259: eeprom_write(num_key * 3 + 3, read_data[0]);
   864  0191  0020               	movlb	0	; select bank0
   865  0192  0820               	movf	_read_data,w	;volatile
   866  0193  00F2               	movwf	?_eeprom_write
   867  0194  082A               	movf	save_key_eeprom@num_key,w
   868  0195  0709               	addwf	9,w
   869  0196  072A               	addwf	save_key_eeprom@num_key,w
   870  0197  3E03               	addlw	3
   871  0198  3182  221E  3181   	fcall	_eeprom_write
   872                           
   873                           ;main.c: 260: return 1;
   874  019B  3401               	retlw	1
   875  019C                     __end_of_save_key_eeprom:	
   876                           
   877                           	psect	text469
   878  0236                     __ptext469:	
   879 ;; =============== function _save_key_eeprom ends ============
   880                           
   881                           
   882 ;; *************** function _play_long_zum *****************
   883 ;; Defined at:
   884 ;;		line 263 in file "main.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;		None
   889 ;; Return value:  Size  Location     Type
   890 ;;		None               void
   891 ;; Registers used:
   892 ;;		wreg
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 1F/1
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMMON   BANK0   BANK1
   898 ;;      Params:         0       0       0
   899 ;;      Locals:         0       0       0
   900 ;;      Temps:          3       0       0
   901 ;;      Totals:         3       0       0
   902 ;;Total ram usage:        3 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    1
   905 ;; This function calls:
   906 ;;		Nothing
   907 ;; This function is called by:
   908 ;;		_main
   909 ;; This function uses a non-reentrant model
   910 ;;
   911  0236                     _play_long_zum:	
   912                           
   913                           ;main.c: 264: { TRISA1 = 0; RA1 = 0; };
   914                           
   915                           ; Regs used in _play_long_zum: [wreg]
   916  0236  0021               	movlb	1	; select bank1
   917  0237  108C               	bcf	12,1
   918  0238  0020               	movlb	0	; select bank0
   919  0239  108C               	bcf	12,1
   920                           
   921                           ;main.c: 265: _delay((unsigned long)((1000)*(16000000/4000.0)));
   922  023A  3015               	movlw	21
   923  023B  00F4               	movwf	??_play_long_zum+2
   924  023C  3037               	movlw	55
   925  023D  00F3               	movwf	??_play_long_zum+1
   926  023E  30CA               	movlw	202
   927  023F  00F2               	movwf	??_play_long_zum
   928  0240                     u1527:	
   929  0240  0BF2               	decfsz	??_play_long_zum,f
   930  0241  2A40               	goto	u1527
   931  0242  0BF3               	decfsz	??_play_long_zum+1,f
   932  0243  2A40               	goto	u1527
   933  0244  0BF4               	decfsz	??_play_long_zum+2,f
   934  0245  2A40               	goto	u1527
   935  0246  2A47               	nop2
   936                           
   937                           ;main.c: 266: { RA1 = 1; TRISA1 = 0; };
   938  0247  0020               	movlb	0	; select bank0
   939  0248  148C               	bsf	12,1
   940  0249  0021               	movlb	1	; select bank1
   941  024A  108C               	bcf	12,1
   942  024B  0008               	return
   943  024C                     __end_of_play_long_zum:	
   944                           
   945                           	psect	text470
   946  019C                     __ptext470:	
   947 ;; =============== function _play_long_zum ends ============
   948                           
   949                           
   950 ;; *************** function _check_key_in_base *****************
   951 ;; Defined at:
   952 ;;		line 219 in file "main.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;		None
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  count_keys      1    8[COMMON] unsigned char 
   957 ;;  dat3            1    7[COMMON] unsigned char 
   958 ;;  dat2            1    6[COMMON] unsigned char 
   959 ;;  dat1            1    5[COMMON] unsigned char 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      unsigned char 
   962 ;; Registers used:
   963 ;;		wreg, status,2, status,0, pclath, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 1C/0
   967 ;;		Unchanged: FFFE0/0
   968 ;; Data sizes:     COMMON   BANK0   BANK1
   969 ;;      Params:         0       0       0
   970 ;;      Locals:         4       0       0
   971 ;;      Temps:          0       0       0
   972 ;;      Totals:         4       0       0
   973 ;;Total ram usage:        4 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; Hardware stack levels required when called:    2
   976 ;; This function calls:
   977 ;;		_eeprom_read
   978 ;; This function is called by:
   979 ;;		_save_key_eeprom
   980 ;;		_main
   981 ;; This function uses a non-reentrant model
   982 ;;
   983  019C                     _check_key_in_base:	
   984                           
   985                           ;main.c: 220: unsigned char dat1, dat2, dat3;
   986                           ;main.c: 221: unsigned char count_keys = eeprom_read(0);
   987                           
   988                           ; Regs used in _check_key_in_base: [wreg+status,2+status,0+pclath+cstack]
   989  019C  3000               	movlw	0
   990  019D  3182  224C  3181   	fcall	_eeprom_read
   991  01A0  00F8               	movwf	check_key_in_base@count_keys
   992                           
   993                           ;main.c: 224: if(count_keys == 0xFF)
   994  01A1  3AFF               	xorlw	255
   995  01A2  1903               	btfsc	3,2
   996                           
   997                           ;main.c: 225: return 0;
   998  01A3  3400               	retlw	0
   999  01A4                     l2394:	
  1000  01A4  08F8               	movf	check_key_in_base@count_keys,f
  1001  01A5  1903               	btfsc	3,2
  1002  01A6  3400               	retlw	0
  1003                           
  1004                           ;main.c: 229: --count_keys;
  1005  01A7  03F8               	decf	check_key_in_base@count_keys,f
  1006                           
  1007                           ;main.c: 230: dat1 = eeprom_read(count_keys * 3 + 1);
  1008  01A8  0878               	movf	check_key_in_base@count_keys,w
  1009  01A9  0709               	addwf	9,w
  1010  01AA  0778               	addwf	check_key_in_base@count_keys,w
  1011  01AB  3E01               	addlw	1
  1012  01AC  3182  224C  3181   	fcall	_eeprom_read
  1013  01AF  00F5               	movwf	check_key_in_base@dat1
  1014                           
  1015                           ;main.c: 231: dat2 = eeprom_read(count_keys * 3 + 2);
  1016  01B0  0878               	movf	check_key_in_base@count_keys,w
  1017  01B1  0709               	addwf	9,w
  1018  01B2  0778               	addwf	check_key_in_base@count_keys,w
  1019  01B3  3E02               	addlw	2
  1020  01B4  3182  224C  3181   	fcall	_eeprom_read
  1021  01B7  00F6               	movwf	check_key_in_base@dat2
  1022                           
  1023                           ;main.c: 232: dat3 = eeprom_read(count_keys * 3 + 3);
  1024  01B8  0878               	movf	check_key_in_base@count_keys,w
  1025  01B9  0709               	addwf	9,w
  1026  01BA  0778               	addwf	check_key_in_base@count_keys,w
  1027  01BB  3E03               	addlw	3
  1028  01BC  3182  224C  3181   	fcall	_eeprom_read
  1029  01BF  00F7               	movwf	check_key_in_base@dat3
  1030                           
  1031                           ;main.c: 235: if (((dat1 == read_data[2]) &&
  1032                           ;main.c: 236: (dat2 == read_data[1])) &&
  1033                           ;main.c: 237: (dat3 == read_data[0]))
  1034  01C0  0020               	movlb	0	; select bank0
  1035  01C1  0822               	movf	_read_data+2,w	;volatile
  1036  01C2  0675               	xorwf	check_key_in_base@dat1,w
  1037  01C3  1D03               	skipz
  1038  01C4  29A4               	goto	l2394
  1039  01C5  0821               	movf	_read_data+1,w	;volatile
  1040  01C6  0676               	xorwf	check_key_in_base@dat2,w
  1041  01C7  1D03               	skipz
  1042  01C8  29A4               	goto	l2394
  1043  01C9  0877               	movf	check_key_in_base@dat3,w
  1044  01CA  0620               	xorwf	_read_data,w	;volatile
  1045  01CB  1903               	btfsc	3,2
  1046                           
  1047                           ;main.c: 238: return 1;
  1048  01CC  3401               	retlw	1
  1049  01CD  29A4               	goto	l2394
  1050  01CE                     __end_of_check_key_in_base:	
  1051                           
  1052                           	psect	text471
  1053  01CE                     __ptext471:	
  1054 ;; =============== function _check_key_in_base ends ============
  1055                           
  1056                           
  1057 ;; *************** function _toggle_zumm *****************
  1058 ;; Defined at:
  1059 ;;		line 208 in file "main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  cnt_bit         1    wreg     unsigned char 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  cnt_bit         1    5[COMMON] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;		None               void
  1066 ;; Registers used:
  1067 ;;		wreg, status,2, status,0
  1068 ;; Tracked objects:
  1069 ;;		On entry : 1C/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1
  1073 ;;      Params:         0       0       0
  1074 ;;      Locals:         1       0       0
  1075 ;;      Temps:          3       0       0
  1076 ;;      Totals:         4       0       0
  1077 ;;Total ram usage:        4 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    1
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086  01CE                     _toggle_zumm:	
  1087                           
  1088                           ; Regs used in _toggle_zumm: [wreg+status,2+status,0]
  1089                           ;toggle_zumm@cnt_bit stored from wreg
  1090  01CE  00F5               	movwf	toggle_zumm@cnt_bit
  1091  01CF                     l2366:	
  1092                           ;main.c: 209: while (cnt_bit) {
  1093                           
  1094  01CF  08F5               	movf	toggle_zumm@cnt_bit,f
  1095  01D0  1903               	btfsc	3,2
  1096  01D1  0008               	return
  1097                           
  1098                           ;main.c: 210: { TRISA1 = 0; RA1 = 0; };
  1099  01D2  0021               	movlb	1	; select bank1
  1100  01D3  108C               	bcf	12,1
  1101  01D4  0020               	movlb	0	; select bank0
  1102  01D5  108C               	bcf	12,1
  1103                           
  1104                           ;main.c: 211: _delay((unsigned long)((100)*(16000000/4000.0)));
  1105  01D6  3003               	movlw	3
  1106  01D7  00F4               	movwf	??_toggle_zumm+2
  1107  01D8  3006               	movlw	6
  1108  01D9  00F3               	movwf	??_toggle_zumm+1
  1109  01DA  3077               	movlw	119
  1110  01DB  00F2               	movwf	??_toggle_zumm
  1111  01DC                     u1537:	
  1112  01DC  0BF2               	decfsz	??_toggle_zumm,f
  1113  01DD  29DC               	goto	u1537
  1114  01DE  0BF3               	decfsz	??_toggle_zumm+1,f
  1115  01DF  29DC               	goto	u1537
  1116  01E0  0BF4               	decfsz	??_toggle_zumm+2,f
  1117  01E1  29DC               	goto	u1537
  1118  01E2  0064               	clrwdt
  1119                           
  1120                           ;main.c: 212: { RA1 = 1; TRISA1 = 0; };
  1121  01E3  0020               	movlb	0	; select bank0
  1122  01E4  148C               	bsf	12,1
  1123  01E5  0021               	movlb	1	; select bank1
  1124  01E6  108C               	bcf	12,1
  1125                           
  1126                           ;main.c: 213: _delay((unsigned long)((100)*(16000000/4000.0)));
  1127  01E7  3003               	movlw	3
  1128  01E8  00F4               	movwf	??_toggle_zumm+2
  1129  01E9  3006               	movlw	6
  1130  01EA  00F3               	movwf	??_toggle_zumm+1
  1131  01EB  3077               	movlw	119
  1132  01EC  00F2               	movwf	??_toggle_zumm
  1133  01ED                     u1547:	
  1134  01ED  0BF2               	decfsz	??_toggle_zumm,f
  1135  01EE  29ED               	goto	u1547
  1136  01EF  0BF3               	decfsz	??_toggle_zumm+1,f
  1137  01F0  29ED               	goto	u1547
  1138  01F1  0BF4               	decfsz	??_toggle_zumm+2,f
  1139  01F2  29ED               	goto	u1547
  1140  01F3  0064               	clrwdt
  1141                           
  1142                           ;main.c: 215: --cnt_bit;
  1143  01F4  03F5               	decf	toggle_zumm@cnt_bit,f
  1144  01F5  29CF               	goto	l2366
  1145  01F6                     __end_of_toggle_zumm:	
  1146                           
  1147                           	psect	text472
  1148  01F6                     __ptext472:	
  1149 ;; =============== function _toggle_zumm ends ============
  1150                           
  1151                           
  1152 ;; *************** function _toggle_led *****************
  1153 ;; Defined at:
  1154 ;;		line 197 in file "main.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  cnt_bit         1    wreg     unsigned char 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  cnt_bit         1    5[COMMON] unsigned char 
  1159 ;; Return value:  Size  Location     Type
  1160 ;;		None               void
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0
  1163 ;; Tracked objects:
  1164 ;;		On entry : 1C/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1
  1168 ;;      Params:         0       0       0
  1169 ;;      Locals:         1       0       0
  1170 ;;      Temps:          3       0       0
  1171 ;;      Totals:         4       0       0
  1172 ;;Total ram usage:        4 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181  01F6                     _toggle_led:	
  1182                           
  1183                           ; Regs used in _toggle_led: [wreg+status,2+status,0]
  1184                           ;toggle_led@cnt_bit stored from wreg
  1185  01F6  00F5               	movwf	toggle_led@cnt_bit
  1186  01F7                     l2354:	
  1187                           ;main.c: 198: while (cnt_bit) {
  1188                           
  1189  01F7  08F5               	movf	toggle_led@cnt_bit,f
  1190  01F8  1903               	btfsc	3,2
  1191  01F9  0008               	return
  1192                           
  1193                           ;main.c: 199: { TRISA0 = 0; RA0 = 0; };
  1194  01FA  0021               	movlb	1	; select bank1
  1195  01FB  100C               	bcf	12,0
  1196  01FC  0020               	movlb	0	; select bank0
  1197  01FD  100C               	bcf	12,0
  1198                           
  1199                           ;main.c: 200: _delay((unsigned long)((100)*(16000000/4000.0)));
  1200  01FE  3003               	movlw	3
  1201  01FF  00F4               	movwf	??_toggle_led+2
  1202  0200  3006               	movlw	6
  1203  0201  00F3               	movwf	??_toggle_led+1
  1204  0202  3077               	movlw	119
  1205  0203  00F2               	movwf	??_toggle_led
  1206  0204                     u1557:	
  1207  0204  0BF2               	decfsz	??_toggle_led,f
  1208  0205  2A04               	goto	u1557
  1209  0206  0BF3               	decfsz	??_toggle_led+1,f
  1210  0207  2A04               	goto	u1557
  1211  0208  0BF4               	decfsz	??_toggle_led+2,f
  1212  0209  2A04               	goto	u1557
  1213  020A  0064               	clrwdt
  1214                           
  1215                           ;main.c: 201: { RA0 = 1; TRISA0 = 0; };
  1216  020B  0020               	movlb	0	; select bank0
  1217  020C  140C               	bsf	12,0
  1218  020D  0021               	movlb	1	; select bank1
  1219  020E  100C               	bcf	12,0
  1220                           
  1221                           ;main.c: 202: _delay((unsigned long)((100)*(16000000/4000.0)));
  1222  020F  3003               	movlw	3
  1223  0210  00F4               	movwf	??_toggle_led+2
  1224  0211  3006               	movlw	6
  1225  0212  00F3               	movwf	??_toggle_led+1
  1226  0213  3077               	movlw	119
  1227  0214  00F2               	movwf	??_toggle_led
  1228  0215                     u1567:	
  1229  0215  0BF2               	decfsz	??_toggle_led,f
  1230  0216  2A15               	goto	u1567
  1231  0217  0BF3               	decfsz	??_toggle_led+1,f
  1232  0218  2A15               	goto	u1567
  1233  0219  0BF4               	decfsz	??_toggle_led+2,f
  1234  021A  2A15               	goto	u1567
  1235  021B  0064               	clrwdt
  1236                           
  1237                           ;main.c: 204: --cnt_bit;
  1238  021C  03F5               	decf	toggle_led@cnt_bit,f
  1239  021D  29F7               	goto	l2354
  1240  021E                     __end_of_toggle_led:	
  1241                           
  1242                           	psect	text473
  1243  021E                     __ptext473:	
  1244 ;; =============== function _toggle_led ends ============
  1245                           
  1246                           
  1247 ;; *************** function _eeprom_write *****************
  1248 ;; Defined at:
  1249 ;;		line 8 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.71a\sources\eewrite.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;  addr            1    wreg     unsigned char 
  1252 ;;  value           1    2[COMMON] unsigned char 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  addr            1    3[COMMON] unsigned char 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;		None               void
  1257 ;; Registers used:
  1258 ;;		wreg, status,2, status,0
  1259 ;; Tracked objects:
  1260 ;;		On entry : 1F/0
  1261 ;;		On exit  : 1F/3
  1262 ;;		Unchanged: FFFE0/0
  1263 ;; Data sizes:     COMMON   BANK0   BANK1
  1264 ;;      Params:         1       0       0
  1265 ;;      Locals:         1       0       0
  1266 ;;      Temps:          0       0       0
  1267 ;;      Totals:         2       0       0
  1268 ;;Total ram usage:        2 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; Hardware stack levels required when called:    1
  1271 ;; This function calls:
  1272 ;;		Nothing
  1273 ;; This function is called by:
  1274 ;;		_save_key_eeprom
  1275 ;;		_main
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278  021E                     _eeprom_write:	
  1279                           
  1280                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  1281                           ;eeprom_write@addr stored from wreg
  1282  021E  00F3               	movwf	eeprom_write@addr
  1283  021F                     l1219:	
  1284  021F  0023               	movlb	3	; select bank3
  1285  0220  1895               	btfsc	21,1
  1286  0221  2A1F               	goto	l1219
  1287  0222  0873               	movf	eeprom_write@addr,w
  1288  0223  0091               	movwf	17	;volatile
  1289  0224  0872               	movf	eeprom_write@value,w
  1290  0225  0093               	movwf	19	;volatile
  1291  0226  303F               	movlw	63
  1292  0227  0595               	andwf	21,f	;volatile
  1293  0228  1003               	bcf	3,0
  1294  0229  1B8B               	btfsc	11,7
  1295  022A  1403               	bsf	3,0
  1296  022B  138B               	bcf	11,7
  1297  022C  1515               	bsf	21,2
  1298  022D  3055               	movlw	85
  1299  022E  0096               	movwf	22	;volatile
  1300  022F  30AA               	movlw	170
  1301  0230  0096               	movwf	22	;volatile
  1302  0231  1495               	bsf	21,1
  1303  0232  1115               	bcf	21,2
  1304  0233  1803               	btfsc	3,0
  1305  0234  178B               	bsf	11,7
  1306  0235  0008               	return
  1307  0236                     __end_of_eeprom_write:	
  1308                           
  1309                           	psect	text474
  1310  024C                     __ptext474:	
  1311 ;; =============== function _eeprom_write ends ============
  1312                           
  1313                           
  1314 ;; *************** function _eeprom_read *****************
  1315 ;; Defined at:
  1316 ;;		line 8 in file "eeread.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  addr            1    wreg     unsigned char 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  addr            1    4[COMMON] unsigned char 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      unsigned char 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 1F/3
  1328 ;;		Unchanged: FFFE0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1
  1330 ;;      Params:         0       0       0
  1331 ;;      Locals:         1       0       0
  1332 ;;      Temps:          2       0       0
  1333 ;;      Totals:         3       0       0
  1334 ;;Total ram usage:        3 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    1
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_check_key_in_base
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343  024C                     _eeprom_read:	
  1344                           
  1345                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  1346                           ;eeprom_read@addr stored from wreg
  1347  024C  00F4               	movwf	eeprom_read@addr
  1348  024D                     l1197:	
  1349  024D  0064               	clrwdt	;#
  1350  024E  0023               	movlb	3	; select bank3
  1351  024F  1895               	btfsc	21,1
  1352  0250  2A4D               	goto	l1197
  1353  0251  0874               	movf	eeprom_read@addr,w
  1354  0252  0091               	movwf	17	;volatile
  1355  0253  303F               	movlw	63
  1356  0254  0595               	andwf	21,f	;volatile
  1357  0255  1415               	bsf	21,0
  1358  0256  1003               	clrc
  1359  0257  1815               	btfsc	21,0
  1360  0258  1403               	setc
  1361  0259  3000               	movlw	0
  1362  025A  3D09               	addwfc	9,w
  1363  025B  00F2               	movwf	??_eeprom_read
  1364  025C  01F3               	clrf	??_eeprom_read+1
  1365  025D  0813               	movf	19,w	;volatile
  1366  025E  0008               	return
  1367  025F                     __end_of_eeprom_read:	
  1368                           
  1369                           	psect	text475
  1370  026D                     __ptext475:	
  1371 ;; =============== function _eeprom_read ends ============
  1372                           
  1373                           
  1374 ;; *************** function _flush_rx_msg *****************
  1375 ;; Defined at:
  1376 ;;		line 186 in file "main.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;		None               void
  1383 ;; Registers used:
  1384 ;;		status,2
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/3
  1387 ;;		On exit  : 1F/0
  1388 ;;		Unchanged: FFFE0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1
  1390 ;;      Params:         0       0       0
  1391 ;;      Locals:         0       0       0
  1392 ;;      Temps:          0       0       0
  1393 ;;      Totals:         0       0       0
  1394 ;;Total ram usage:        0 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403  026D                     _flush_rx_msg:	
  1404                           
  1405                           ;main.c: 187: bit_cnt = 0;
  1406                           
  1407                           ; Regs used in _flush_rx_msg: [status,2]
  1408  026D  01FB               	clrf	_bit_cnt	;volatile
  1409                           
  1410                           ;main.c: 188: read_data[2] = 0;
  1411  026E  0020               	movlb	0	; select bank0
  1412  026F  01A2               	clrf	_read_data+2	;volatile
  1413                           
  1414                           ;main.c: 189: read_data[1] = 0;
  1415  0270  01A1               	clrf	_read_data+1	;volatile
  1416                           
  1417                           ;main.c: 190: read_data[0] = 0;
  1418  0271  01A0               	clrf	_read_data	;volatile
  1419                           
  1420                           ;main.c: 192: even_last = 0;
  1421  0272  1079               	bcf	_even_last/(0+8),_even_last& (0+7)
  1422                           
  1423                           ;main.c: 193: odd_first = 0;
  1424  0273  1179               	bcf	_odd_first/(0+8),_odd_first& (0+7)
  1425                           
  1426                           ;main.c: 194: msg_handled = 1;
  1427  0274  147A               	bsf	_msg_handled/(0+8),_msg_handled& (0+7)
  1428  0275  0008               	return
  1429  0276                     __end_of_flush_rx_msg:	
  1430                           
  1431                           	psect	text476
  1432  0276                     __ptext476:	
  1433 ;; =============== function _flush_rx_msg ends ============
  1434                           
  1435                           
  1436 ;; *************** function _toggle_lock *****************
  1437 ;; Defined at:
  1438 ;;		line 178 in file "main.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;		None               void
  1445 ;; Registers used:
  1446 ;;		None
  1447 ;; Tracked objects:
  1448 ;;		On entry : 1C/0
  1449 ;;		On exit  : 1F/0
  1450 ;;		Unchanged: FFFE0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1
  1452 ;;      Params:         0       0       0
  1453 ;;      Locals:         0       0       0
  1454 ;;      Temps:          0       0       0
  1455 ;;      Totals:         0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    1
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465  0276                     _toggle_lock:	
  1466                           
  1467                           ;main.c: 179: if ((RA5 == 1)) {
  1468                           
  1469                           ; Regs used in _toggle_lock: []
  1470  0276  0020               	movlb	0	; select bank0
  1471  0277  1E8C               	btfss	12,5
  1472  0278  2A7B               	goto	l1123
  1473                           
  1474                           ;main.c: 180: RA5 = 0;
  1475  0279  128C               	bcf	12,5
  1476                           
  1477                           ;main.c: 181: } else {
  1478  027A  0008               	return
  1479  027B                     l1123:	
  1480                           
  1481                           ;main.c: 182: RA5 = 1;
  1482  027B  168C               	bsf	12,5
  1483  027C  0008               	return
  1484  027D                     __end_of_toggle_lock:	
  1485                           
  1486                           	psect	text477
  1487  027D                     __ptext477:	
  1488 ;; =============== function _toggle_lock ends ============
  1489                           
  1490                           
  1491 ;; *************** function _init_timer *****************
  1492 ;; Defined at:
  1493 ;;		line 167 in file "main.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;		None               void
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0
  1502 ;; Tracked objects:
  1503 ;;		On entry : 17F/7
  1504 ;;		On exit  : 17F/1
  1505 ;;		Unchanged: FFE80/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1
  1507 ;;      Params:         0       0       0
  1508 ;;      Locals:         0       0       0
  1509 ;;      Temps:          0       0       0
  1510 ;;      Totals:         0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    1
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520  027D                     _init_timer:	
  1521                           
  1522                           ;main.c: 172: PSA = 0;
  1523                           
  1524                           ; Regs used in _init_timer: [wreg+status,2+status,0]
  1525  027D  0021               	movlb	1	; select bank1
  1526  027E  1195               	bcf	21,3
  1527                           
  1528                           ;main.c: 173: OPTION_REGbits.PS = 0x7;
  1529  027F  3007               	movlw	7
  1530  0280  0495               	iorwf	21,f	;volatile
  1531                           
  1532                           ;main.c: 174: TMR0CS = 0;
  1533  0281  1295               	bcf	21,5
  1534                           
  1535                           ;main.c: 175: TMR0IE = 1;
  1536  0282  168B               	bsf	11,5
  1537  0283  0008               	return
  1538  0284                     __end_of_init_timer:	
  1539                           
  1540                           	psect	intentry
  1541  0004                     __pintentry:	
  1542 ;; =============== function _init_timer ends ============
  1543                           
  1544                           
  1545 ;; *************** function _isr *****************
  1546 ;; Defined at:
  1547 ;;		line 70 in file "main.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;		None               void
  1554 ;; Registers used:
  1555 ;;		wreg, status,2, status,0
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 18/0
  1559 ;;		Unchanged: FFFE0/0
  1560 ;; Data sizes:     COMMON   BANK0   BANK1
  1561 ;;      Params:         0       0       0
  1562 ;;      Locals:         0       0       0
  1563 ;;      Temps:          2       0       0
  1564 ;;      Totals:         2       0       0
  1565 ;;Total ram usage:        2 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		Interrupt level 1
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573  0004                     _isr:	
  1574                           
  1575                           ; Regs used in _isr: [wreg+status,2+status,0]
  1576  0004  3180               	pagesel	$
  1577                           
  1578                           ;main.c: 72: if (msg_handled && IOCIE) {
  1579  0005  187A               	btfsc	_msg_handled/(0+8),_msg_handled& (0+7)
  1580  0006  1D8B               	btfss	11,3
  1581  0007  289F               	goto	i1l2034
  1582                           
  1583                           ;main.c: 73: if (IOCAF2) {
  1584  0008  0027               	movlb	7	; select bank7
  1585  0009  1D13               	btfss	19,2
  1586  000A  2851               	goto	i1l1077
  1587                           
  1588                           ;main.c: 74: if (bit_cnt == 0) {
  1589  000B  08FB               	movf	_bit_cnt,f
  1590  000C  1D03               	skipz
  1591  000D  2810               	goto	i1l1954
  1592                           
  1593                           ;main.c: 75: odd_first = 1;
  1594  000E  1579               	bsf	_odd_first/(0+8),_odd_first& (0+7)
  1595                           
  1596                           ;main.c: 76: } else {
  1597  000F  284A               	goto	i1l1079
  1598  0010                     i1l1954:	
  1599                           
  1600                           ;main.c: 77: if (bit_cnt < 8) {
  1601  0010  3008               	movlw	8
  1602  0011  027B               	subwf	_bit_cnt,w	;volatile
  1603  0012  1803               	skipnc
  1604  0013  2818               	goto	i1l1958
  1605                           
  1606                           ;main.c: 78: read_data[2] |= 1;
  1607  0014  0020               	movlb	0	; select bank0
  1608  0015  1422               	bsf	_read_data+2,0	;volatile
  1609                           
  1610                           ;main.c: 79: read_data[2] <<= 1;
  1611  0016  35A2               	lslf	_read_data+2,f	;volatile
  1612                           
  1613                           ;main.c: 80: } else
  1614  0017  2844               	goto	i1l1982
  1615  0018                     i1l1958:	
  1616                           
  1617                           ;main.c: 81: if (bit_cnt == 8) {
  1618  0018  087B               	movf	_bit_cnt,w	;volatile
  1619  0019  3A08               	xorlw	8
  1620  001A  1D03               	skipz
  1621  001B  281F               	goto	i1l1962
  1622                           
  1623                           ;main.c: 82: read_data[2] |= 1;
  1624  001C  0020               	movlb	0	; select bank0
  1625  001D  1422               	bsf	_read_data+2,0	;volatile
  1626                           
  1627                           ;main.c: 83: } else
  1628  001E  2844               	goto	i1l1982
  1629  001F                     i1l1962:	
  1630                           
  1631                           ;main.c: 84: if (bit_cnt > 8 && bit_cnt < 16) {
  1632  001F  3009               	movlw	9
  1633  0020  027B               	subwf	_bit_cnt,w	;volatile
  1634  0021  1C03               	skipc
  1635  0022  282B               	goto	i1l1968
  1636  0023  3010               	movlw	16
  1637  0024  027B               	subwf	_bit_cnt,w	;volatile
  1638  0025  1803               	skipnc
  1639  0026  282B               	goto	i1l1968
  1640                           
  1641                           ;main.c: 85: read_data[1] |= 1;
  1642  0027  0020               	movlb	0	; select bank0
  1643  0028  1421               	bsf	_read_data+1,0	;volatile
  1644                           
  1645                           ;main.c: 86: read_data[1] <<= 1;
  1646  0029  35A1               	lslf	_read_data+1,f	;volatile
  1647                           
  1648                           ;main.c: 87: } else
  1649  002A  2844               	goto	i1l1982
  1650  002B                     i1l1968:	
  1651                           
  1652                           ;main.c: 88: if (bit_cnt == 17) {
  1653  002B  087B               	movf	_bit_cnt,w	;volatile
  1654  002C  3A11               	xorlw	17
  1655  002D  1D03               	skipz
  1656  002E  2832               	goto	i1l1972
  1657                           
  1658                           ;main.c: 89: read_data[1] |= 1;
  1659  002F  0020               	movlb	0	; select bank0
  1660  0030  1421               	bsf	_read_data+1,0	;volatile
  1661                           
  1662                           ;main.c: 90: } else
  1663  0031  2844               	goto	i1l1982
  1664  0032                     i1l1972:	
  1665                           
  1666                           ;main.c: 91: if (bit_cnt > 16 && bit_cnt < 24) {
  1667  0032  3011               	movlw	17
  1668  0033  027B               	subwf	_bit_cnt,w	;volatile
  1669  0034  1C03               	skipc
  1670  0035  283E               	goto	i1l1978
  1671  0036  3018               	movlw	24
  1672  0037  027B               	subwf	_bit_cnt,w	;volatile
  1673  0038  1803               	skipnc
  1674  0039  283E               	goto	i1l1978
  1675                           
  1676                           ;main.c: 92: read_data[0] |= 1;
  1677  003A  0020               	movlb	0	; select bank0
  1678  003B  1420               	bsf	_read_data,0	;volatile
  1679                           
  1680                           ;main.c: 93: read_data[0] <<= 1;
  1681  003C  35A0               	lslf	_read_data,f	;volatile
  1682                           
  1683                           ;main.c: 94: } else
  1684  003D  2844               	goto	i1l1982
  1685  003E                     i1l1978:	
  1686                           
  1687                           ;main.c: 95: if (bit_cnt == 24) {
  1688  003E  087B               	movf	_bit_cnt,w	;volatile
  1689  003F  3A18               	xorlw	24
  1690  0040  1D03               	skipz
  1691  0041  2844               	goto	i1l1982
  1692                           
  1693                           ;main.c: 96: read_data[0] |= 1;
  1694  0042  0020               	movlb	0	; select bank0
  1695  0043  1420               	bsf	_read_data,0	;volatile
  1696  0044                     i1l1982:	
  1697                           
  1698                           ;main.c: 97: }
  1699                           ;main.c: 98: if (bit_cnt < 25)
  1700  0044  3019               	movlw	25
  1701  0045  027B               	subwf	_bit_cnt,w	;volatile
  1702  0046  1803               	skipnc
  1703  0047  284A               	goto	i1l1079
  1704                           
  1705                           ;main.c: 99: ++cnt_d;
  1706  0048  0020               	movlb	0	; select bank0
  1707  0049  0AA9               	incf	_cnt_d,f	;volatile
  1708  004A                     i1l1079:	
  1709                           
  1710                           ;main.c: 100: }
  1711                           ;main.c: 102: ++bit_cnt;
  1712  004A  0AFB               	incf	_bit_cnt,f	;volatile
  1713                           
  1714                           ;main.c: 104: if (bit_cnt == 26) {
  1715  004B  087B               	movf	_bit_cnt,w	;volatile
  1716  004C  3A1A               	xorlw	26
  1717  004D  1D03               	skipz
  1718  004E  2873               	goto	i1l2010
  1719                           
  1720                           ;main.c: 105: even_last = 1;
  1721  004F  1479               	bsf	_even_last/(0+8),_even_last& (0+7)
  1722  0050  2873               	goto	i1l2010
  1723  0051                     i1l1077:	
  1724                           
  1725                           ;main.c: 108: if (IOCAF3) {
  1726  0051  1D93               	btfss	19,3
  1727  0052  2873               	goto	i1l2010
  1728                           
  1729                           ;main.c: 109: if (bit_cnt > 0 && bit_cnt < 8) {
  1730  0053  087B               	movf	_bit_cnt,w	;volatile
  1731  0054  1903               	btfsc	3,2
  1732  0055  285D               	goto	i1l1996
  1733  0056  3008               	movlw	8
  1734  0057  027B               	subwf	_bit_cnt,w	;volatile
  1735  0058  1803               	skipnc
  1736  0059  285D               	goto	i1l1996
  1737                           
  1738                           ;main.c: 110: read_data[2] <<= 1;
  1739  005A  0020               	movlb	0	; select bank0
  1740  005B  35A2               	lslf	_read_data+2,f	;volatile
  1741                           
  1742                           ;main.c: 111: } else
  1743  005C  2872               	goto	i1l2008
  1744  005D                     i1l1996:	
  1745                           
  1746                           ;main.c: 112: if (bit_cnt > 8 && bit_cnt < 16) {
  1747  005D  3009               	movlw	9
  1748  005E  027B               	subwf	_bit_cnt,w	;volatile
  1749  005F  1C03               	skipc
  1750  0060  2868               	goto	i1l2002
  1751  0061  3010               	movlw	16
  1752  0062  027B               	subwf	_bit_cnt,w	;volatile
  1753  0063  1803               	skipnc
  1754  0064  2868               	goto	i1l2002
  1755                           
  1756                           ;main.c: 113: read_data[1] <<= 1;
  1757  0065  0020               	movlb	0	; select bank0
  1758  0066  35A1               	lslf	_read_data+1,f	;volatile
  1759                           
  1760                           ;main.c: 114: } else
  1761  0067  2872               	goto	i1l2008
  1762  0068                     i1l2002:	
  1763                           
  1764                           ;main.c: 115: if (bit_cnt > 16 && bit_cnt < 24) {
  1765  0068  3011               	movlw	17
  1766  0069  027B               	subwf	_bit_cnt,w	;volatile
  1767  006A  1C03               	skipc
  1768  006B  2872               	goto	i1l2008
  1769  006C  3018               	movlw	24
  1770  006D  027B               	subwf	_bit_cnt,w	;volatile
  1771  006E  1803               	skipnc
  1772  006F  2872               	goto	i1l2008
  1773                           
  1774                           ;main.c: 116: read_data[0] <<= 1;
  1775  0070  0020               	movlb	0	; select bank0
  1776  0071  35A0               	lslf	_read_data,f	;volatile
  1777  0072                     i1l2008:	
  1778                           
  1779                           ;main.c: 117: }
  1780                           ;main.c: 119: ++bit_cnt;
  1781  0072  0AFB               	incf	_bit_cnt,f	;volatile
  1782  0073                     i1l2010:	
  1783                           
  1784                           ;main.c: 120: }
  1785                           ;main.c: 121: if (IOCAF2 || IOCAF3) {
  1786  0073  0027               	movlb	7	; select bank7
  1787  0074  1913               	btfsc	19,2
  1788  0075  2878               	goto	i1l2014
  1789  0076  1D93               	btfss	19,3
  1790  0077  289F               	goto	i1l2034
  1791  0078                     i1l2014:	
  1792                           
  1793                           ;main.c: 122: if (bit_cnt == 1) {
  1794  0078  0B7B               	decfsz	_bit_cnt,w	;volatile
  1795  0079  287E               	goto	i1l2020
  1796                           
  1797                           ;main.c: 123: cnt_d = 0;
  1798  007A  0020               	movlb	0	; select bank0
  1799  007B  01A9               	clrf	_cnt_d	;volatile
  1800                           
  1801                           ;main.c: 124: msg_err = 0;
  1802  007C  10F9               	bcf	_msg_err/(0+8),_msg_err& (0+7)
  1803                           
  1804                           ;main.c: 125: } else
  1805  007D  289F               	goto	i1l2034
  1806  007E                     i1l2020:	
  1807                           
  1808                           ;main.c: 126: if (bit_cnt == 13) {
  1809  007E  087B               	movf	_bit_cnt,w	;volatile
  1810  007F  3A0D               	xorlw	13
  1811  0080  1D03               	skipz
  1812  0081  288F               	goto	i1l2028
  1813                           
  1814                           ;main.c: 127: if ((cnt_d & 1) != odd_first)
  1815  0082  3000               	movlw	0
  1816  0083  1979               	btfsc	_odd_first/(0+8),_odd_first& (0+7)
  1817  0084  3001               	movlw	1
  1818  0085  00F0               	movwf	??_isr
  1819  0086  3001               	movlw	1
  1820  0087  0020               	movlb	0	; select bank0
  1821  0088  0529               	andwf	_cnt_d,w
  1822  0089  00F1               	movwf	??_isr+1
  1823  008A  0670               	xorwf	??_isr,w
  1824  008B  1D03               	btfss	3,2
  1825                           
  1826                           ;main.c: 128: msg_err = 1;
  1827  008C  14F9               	bsf	_msg_err/(0+8),_msg_err& (0+7)
  1828                           
  1829                           ;main.c: 130: cnt_d = 0;
  1830  008D  01A9               	clrf	_cnt_d	;volatile
  1831                           
  1832                           ;main.c: 131: } else
  1833  008E  289F               	goto	i1l2034
  1834  008F                     i1l2028:	
  1835                           
  1836                           ;main.c: 132: if (bit_cnt > 25) {
  1837  008F  301A               	movlw	26
  1838  0090  027B               	subwf	_bit_cnt,w	;volatile
  1839  0091  1C03               	skipc
  1840  0092  289F               	goto	i1l2034
  1841                           
  1842                           ;main.c: 133: if ((cnt_d & 1) == even_last)
  1843  0093  3000               	movlw	0
  1844  0094  1879               	btfsc	_even_last/(0+8),_even_last& (0+7)
  1845  0095  3001               	movlw	1
  1846  0096  00F0               	movwf	??_isr
  1847  0097  3001               	movlw	1
  1848  0098  0020               	movlb	0	; select bank0
  1849  0099  0529               	andwf	_cnt_d,w
  1850  009A  00F1               	movwf	??_isr+1
  1851  009B  0670               	xorwf	??_isr,w
  1852  009C  1903               	btfsc	3,2
  1853                           
  1854                           ;main.c: 134: msg_err = 1;
  1855  009D  14F9               	bsf	_msg_err/(0+8),_msg_err& (0+7)
  1856                           
  1857                           ;main.c: 135: msg_handled = 0;
  1858  009E  107A               	bcf	_msg_handled/(0+8),_msg_handled& (0+7)
  1859  009F                     i1l2034:	
  1860                           
  1861                           ;main.c: 136: }
  1862                           ;main.c: 137: }
  1863                           ;main.c: 138: }
  1864                           ;main.c: 139: IOCAF = 0;
  1865  009F  0027               	movlb	7	; select bank7
  1866  00A0  0193               	clrf	19	;volatile
  1867                           
  1868                           ;main.c: 142: if (TMR0IE && TMR0IF) {
  1869  00A1  1A8B               	btfsc	11,5
  1870  00A2  1D0B               	btfss	11,2
  1871  00A3  0009               	retfie
  1872                           
  1873                           ;main.c: 143: TMR0IF = 0;
  1874  00A4  110B               	bcf	11,2
  1875                           
  1876                           ;main.c: 144: if (bit_cnt != 0)
  1877  00A5  087B               	movf	_bit_cnt,w	;volatile
  1878  00A6  1903               	btfsc	3,2
  1879  00A7  28AC               	goto	i1l2046
  1880                           
  1881                           ;main.c: 145: ++tmr0_msg_timeout;
  1882  00A8  0020               	movlb	0	; select bank0
  1883  00A9  0AA5               	incf	_tmr0_msg_timeout,f	;volatile
  1884  00AA  1903               	skipnz
  1885  00AB  0AA6               	incf	_tmr0_msg_timeout+1,f	;volatile
  1886  00AC                     i1l2046:	
  1887                           
  1888                           ;main.c: 147: if ((RA4 == 0)) {
  1889  00AC  0020               	movlb	0	; select bank0
  1890  00AD  1A0C               	btfsc	12,4
  1891  00AE  28B2               	goto	i1l2050
  1892                           
  1893                           ;main.c: 148: ++tmr0_btn_delay;
  1894  00AF  0AA3               	incf	_tmr0_btn_delay,f	;volatile
  1895  00B0  1903               	skipnz
  1896  00B1  0AA4               	incf	_tmr0_btn_delay+1,f	;volatile
  1897  00B2                     i1l2050:	
  1898                           
  1899                           ;main.c: 149: }
  1900                           ;main.c: 150: if (pgm_mode)
  1901  00B2  1DF9               	btfss	_pgm_mode/(0+8),_pgm_mode& (0+7)
  1902  00B3  0009               	retfie
  1903                           
  1904                           ;main.c: 151: ++tmr0_pgm_delay;
  1905  00B4  0AA7               	incf	_tmr0_pgm_delay,f	;volatile
  1906  00B5  1903               	skipnz
  1907  00B6  0AA8               	incf	_tmr0_pgm_delay+1,f	;volatile
  1908  00B7  0009               	retfie
  1909  00B8                     __end_of_isr:	
  1910                           
  1911 ;; =============== function _isr ends ============
  1912  007E                     btemp	set	126	;btemp
  1913  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.71a build 6446 
Symbol Table                                                                                   Tue Mar 14 20:05:28 2023

                         _RD 0CA8                           _WR 0CA9                          _GIE 005F  
                        _RA0 0060                          _RA1 0061                          _RA4 0064  
                        _RA5 0065                          _PSA 04AB                          _isr 0004  
                        wreg 0009                  main@cnt_key 002E                         l1120 0000  
                       l1123 027B                         l1140 0000                         l1134 0000  
                       l1128 0000                         l1218 0000                         l1219 021F  
                       l2300 0000                         l1156 0000                         l1164 0121  
                       l2302 0000                         l1175 0153                         l2304 0000  
                       l2312 0000                         l2400 0000                         l2306 0000  
                       l2314 0000                         l2330 0000                         l2402 0000  
                       l2308 0000                         l2316 0000                         l2340 0000  
                       l2404 0000                         l2500 011A                         l1197 024D  
                       l2318 0000                         l2334 0000                         l2326 0000  
                       l2350 0000                         l2406 0000                         l2430 0000  
                       l2422 0000                         l2510 0000                         l1199 0000  
                       l2336 0000                         l2328 0000                         l2352 0000  
                       l2344 0000                         l2360 0000                         l2424 0000  
                       l2408 0000                         l2520 0000                         l2512 012F  
                       l2504 011E                         l2440 0000                         l2338 0000  
                       l2346 0000                         l2354 01F7                         l2362 0000  
                       l2370 0000                         l2426 0000                         l2530 0000  
                       l2522 013D                         l2450 0000                         l2442 0000  
                       l2434 0000                         l2348 0000                         l2364 0000  
                       l2356 0000                         l2380 0000                         l2428 0000  
                       l2532 0000                         l2460 0000                         l2452 0000  
                       l2444 0000                         l2436 0000                         l2358 0000  
                       l2366 01CF                         l2382 0000                         l2542 0000  
                       l2526 0000                         l2534 0156                         l2470 00DF  
                       l2462 0000                         l2454 0000                         l2446 0000  
                       l2438 0000                         l2384 0000                         l2368 0000  
                       l2544 0168                         l2528 0000                         l2480 0000  
                       l2464 0000                         l2456 0000                         l2448 0000  
                       l2378 0000                         l2394 01A4                         l2538 0000  
                       l2490 0000                         l2466 0000                         l2458 0000  
                       l2484 00F5                         l2468 0000                         l2494 0000  
                       l2478 0000                         l2486 00F9                         l2496 0000  
                       l2498 0000                         ?_isr 0070                         u1517 010E  
                       u1527 0240                         u1537 01DC                         u1547 01ED  
                       u1557 0204                         u1567 0215                         _PEIE 005E  
                       _WREN 0CAA                         _WPUA 020C               ??_eeprom_write 0073  
                       _main 00BA                         btemp 007E                         start 00B8  
                      ??_isr 0070                        ?_main 0070                        _CARRY 0018  
                      _IOCAF 0393                        _IOCIE 005B                        _TRISA 008C  
                      _cnt_d 0029               __pbitbssCOMMON 03C8                        wtemp0 007E  
               __end_of_main 016A        check_key_in_base@dat1 0075        check_key_in_base@dat2 0076  
      check_key_in_base@dat3 0077                       ??_main 002B        __end_of_play_long_zum 024C  
              ?_flush_rx_msg 0070     __size_of_save_key_eeprom 0032                       _EEADRL 0191  
                     _EEDATA 0193                       _EECON1 0195                       _EECON2 0196  
             _tmr0_btn_delay 0023                       _ANSELA 018C                       _IOCAF2 1C9A  
                     _IOCAF3 1C9B                       _IOCAN2 1C92                       _IOCAN3 1C93  
                     i1l2002 0068                       i1l2010 0073                       i1l2020 007E  
                     i1l2014 0078                       i1l2016 0000                       i1l2008 0072  
                     i1l2050 00B2                       i1l2042 0000                       i1l2018 0000  
                     i1l2034 009F                       i1l2044 0000                       i1l2036 0000  
                     i1l2028 008F                       i1l1077 0051                       i1l2046 00AC  
                     i1l1079 004A                       i1l1944 0000                       i1l1962 001F  
                     i1l1954 0010                       i1l1972 0032                       i1l1982 0044  
                     i1l1958 0018                       i1l1992 0000                       i1l1968 002B  
                     i1l1986 0000                       i1l1978 003E                       i1l1996 005D  
                     _OSCCON 0099                       _TMR0IE 005D                       _TMR0IF 005A  
                     _TMR0CS 04AD                       _TRISA0 0460                       _TRISA1 0461  
                     _TRISA5 0465                       _SWDTEN 04B8         __size_of_eeprom_read 0013  
                     _nWPUEN 04AF               _tmr0_pgm_delay 0027         __end_of_eeprom_write 0236  
             ??_flush_rx_msg 0072            _check_key_in_base 019C              eeprom_read@addr 0074  
         ?_check_key_in_base 0070                 ?_toggle_lock 0070                 ?_toggle_zumm 0070  
             __pcstackCOMMON 0070          ??_check_key_in_base 0075               _OPTION_REGbits 0095  
          eeprom_write@value 0072       save_key_eeprom@num_key 002A    __end_of_check_key_in_base 01CE  
                 __pbssBANK0 0020            ??_save_key_eeprom 0079                   __pmaintext 00BA  
                 __pintentry 0004             main@btn_released 03CC         __end_of_flush_rx_msg 0276  
      __size_of_eeprom_write 0018                   _init_timer 027D                      _bit_cnt 007B  
          toggle_led@cnt_bit 0075                 __size_of_isr 00B4                      _msg_err 03C9  
 __size_of_check_key_in_base 0032         end_of_initialization 026B                 _eeprom_write 021E  
       __size_of_toggle_lock 0007         __size_of_toggle_zumm 0028                   _toggle_led 01F6  
              ??_eeprom_read 0072       __size_of_play_long_zum 0016                  ?_init_timer 0070  
            _save_key_eeprom 016A                __pbitnvCOMMON 03D0          start_initialization 025F  
                __end_of_isr 00B8        __size_of_flush_rx_msg 0009          __end_of_eeprom_read 025F  
                __pbssCOMMON 007B                  ?_toggle_led 0070                 _flush_rx_msg 026D  
              __pcstackBANK0 002A                _play_long_zum 0236             eeprom_write@addr 0073  
        __size_of_init_timer 0007                    __ptext470 019C                    __ptext471 01CE  
                  __ptext472 01F6                    __ptext473 021E                    __ptext474 024C  
                  __ptext475 026D                    __ptext476 0276                    __ptext468 016A  
                  __ptext477 027D                    __ptext469 0236      __end_of_save_key_eeprom 019C  
             ?_play_long_zum 0070                    _odd_first 03CA                    _even_last 03C8  
                  _read_data 0020                  _eeprom_read 024C          __size_of_toggle_led 0028  
         toggle_zumm@cnt_bit 0075                ??_toggle_lock 0072                ??_toggle_zumm 0072  
           ?_save_key_eeprom 0070                 ??_init_timer 0072              ??_play_long_zum 0072  
check_key_in_base@count_keys 0078                __size_of_main 00B0           __end_of_init_timer 0284  
                   _pgm_mode 03CB             _tmr0_msg_timeout 0025          __end_of_toggle_lock 027D  
        __end_of_toggle_zumm 01F6                  _msg_handled 03D0                 ??_toggle_led 0072  
                   intlevel1 0000           __end_of_toggle_led 021E                ?_eeprom_write 0072  
               ?_eeprom_read 0070                  _toggle_lock 0276                  _toggle_zumm 01CE  
